import json

from aiogram import Bot, Dispatcher, types
from aiogram import F, types, Router
from aiogram.filters import or_f, Command, CommandStart, StateFilter
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaAudio,
                           InputMediaDocument, InputMediaPhoto,
                           InputMediaVideo,FSInputFile, Message)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import update
from sqlalchemy import delete
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession


from database.orm_query import orm_add_BasketItem
from database.models import Product, User, BasketItem, News
from filters.chat_types import ChatTypeFilter
from filters.help_filter import orm_put_category, orm_put_postcategory, orm_put_products_by_postcategory, get_or_create_user
from lexicon.lexicon import LEXICON_RU, LEXICON_COMMANDS_RU, LEXICON_PAGINATION_RU, LEXICON_DELYVERY_RU
from keyboard.keyboard_help import create_inline_kb
import config
user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

category = {}
subcategory = {}

#–ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class PersonalAccount(StatesGroup):
    name = State()
    first_name = State()
    adress = State()
    delivery = State()
    payment = State()
    texts = {
        'PersonalAccount:name': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–≤–æ–µ –∏–º—è',
        'PersonalAccount:first_name': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–≤–æ–µ —Ñ–∞–º–∏–ª–∏–µ',
        'PersonalAccount:adress': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–≤–æ–π –∞–¥—Ä–µ—Å',
        'PersonalAccount:delivery': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏',
        'PersonalAccount:payment': '–í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
    }
    
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class MenuStates(StatesGroup):
    main_menu = State()
    basket_menu = State()
    category_menu = State()
    subcategory_menu = State()
    product_menu = State()
    category_key = State()
    subcategory_key = State()
    subcategory_callback = State()
    subcategory_name = State()
    product_dict = State()
    page: int
    
    

# async def add_to_cart(callback: types.CallbackQuery, session: AsyncSession):
#     user = callback.from_user
#     await orm_add_user(
#         session,
#         user_id=user.id,
#         first_name=user.first_name,
#         last_name=user.last_name,
#         phone=None,
#     )
#     await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
#     await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

@user_private_router.message(CommandStart())
async def cmd_start(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    print(user_id)
    first_name = message.from_user.first_name
    print(first_name)
    last_name = message.from_user.last_name
    print(last_name)

    user, created = await get_or_create_user(session, user_id, first_name, last_name)
    await message.answer(LEXICON_RU['/start'])

@user_private_router.message(or_f(Command('menu'),F.text.lower() == '–º–µ–Ω—é'))
async def process_menu_command(message: Message, state: FSMContext):
    await state.set_state(MenuStates.main_menu)
    text = 'üçè–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞, —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ Appleüçè\n\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω / Trade-in'
    await message.answer_photo(
        photo=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text,
        reply_markup=create_inline_kb(
            2,
            catalog = LEXICON_COMMANDS_RU['catalog'],
            news = LEXICON_COMMANDS_RU['news'],
            basket_buyer = LEXICON_COMMANDS_RU['basket_buyer'],
            orders = LEXICON_COMMANDS_RU['orders'],
            personal_account = LEXICON_COMMANDS_RU['personal_account'],
            search = LEXICON_COMMANDS_RU['search'],
            support = LEXICON_COMMANDS_RU['support']
        )
    )
async def process_menu_refresh_command(message: Message, state: FSMContext):
    await state.set_state(MenuStates.main_menu)
    text = 'üçè–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞, —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ Appleüçè\n\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω / Trade-in'
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text
    )
    await message.edit_media(
        media = media,
        reply_markup=create_inline_kb(
            2,
            catalog = LEXICON_COMMANDS_RU['catalog'],
            news = LEXICON_COMMANDS_RU['news'],
            basket_buyer = LEXICON_COMMANDS_RU['basket_buyer'],
            orders = LEXICON_COMMANDS_RU['orders'],
            personal_account = LEXICON_COMMANDS_RU['personal_account'],
            search = LEXICON_COMMANDS_RU['search'],
            support = LEXICON_COMMANDS_RU['support']
        )
    )
    
@user_private_router.callback_query(F.data == 'catalog')
async def process_category_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.set_state(MenuStates.category_menu)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputMediaPhoto —Å —Ñ–∞–π–ª–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text
    )
    keyboard = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await orm_put_category(session)
    
    for key, value in category.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ callback_data
        keyboard.button(text=f'üí†{value}üí†', callback_data=f'category_{key}')
    
    keyboard.button(
        callback_data='search',
        text=LEXICON_COMMANDS_RU['search']
    )
    keyboard.button(
        callback_data='support',
        text=LEXICON_COMMANDS_RU['support']
    )
    keyboard.button(
        callback_data='back1',
        text=LEXICON_RU['back']
    )
    keyboard.adjust(2)
    reply_markup_category = keyboard.as_markup()
    
    await callback.message.edit_media(
        media=media,
        reply_markup=reply_markup_category
    )


@user_private_router.callback_query(F.data.startswith('category_'))
async def process_subcategory_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.set_state(MenuStates.subcategory_menu)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_key = callback.data.split('_')[-1]
    await state.update_data(category_key=category_key)
    config.product_path.append(category_key)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name, subcategory = await orm_put_postcategory(session, category_key)
    
    text = f'–í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ {category_name}, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –º–æ–¥–µ–ª—å –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?'
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text
    )
    keyboard = InlineKeyboardBuilder()
    
    for key, value in subcategory.items():
        keyboard.button(text=f'üí†{value}üí†', callback_data=key)
    
    keyboard.button(
        callback_data='search',
        text=LEXICON_COMMANDS_RU['search']
    )
    keyboard.button(
        callback_data='support',
        text=LEXICON_COMMANDS_RU['support']
    )
    keyboard.button(
        callback_data='back1',
        text=LEXICON_RU['back']
    )
    keyboard.adjust(2)
    reply_markup_subcategory = keyboard.as_markup()
    
    await callback.message.edit_media(
        media=media,
        reply_markup=reply_markup_subcategory
    )
    return subcategory

@user_private_router.callback_query(F.data.startswith('postcategory_'))
async def process_product_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.set_state(MenuStates.product_menu)
    postcategory_key = callback.data.split('_')[-1]
    await state.update_data(postcategory_key=postcategory_key)
    data = await state.get_data()
    category_key = data.get('category_key')
    subcategory_name, product_dict = await orm_put_products_by_postcategory(session, category_key, postcategory_key)
    await state.update_data(page=0)
    await state.update_data(product_dict = product_dict)
    await state.update_data(subcategory_name = subcategory_name)
    
    await update_product_message(callback, product_dict, subcategory_name, state, page = 0)


@user_private_router.callback_query(F.data == 'backward')
async def process_backward_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await state.update_data(page=page - 1)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page - 1
    else:
        await callback.answer('–ú–µ–Ω—å—à–µ –Ω–µ–∫—É–¥–∞, —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    postcategory_key = data['postcategory_key']
    category_key = data.get('category_key')
    subcategory_name = data.get('subcategory_name')
    product_dict = data.get('product_dict')
    await update_product_message(callback, product_dict, subcategory_name, state, page)


@user_private_router.callback_query(F.data == 'forward')
async def process_forward_command(callback: CallbackQuery, session: AsyncSession,  state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    product_dict = data.get('product_dict', {})
    if page < len(product_dict) - 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        await state.update_data(page=page + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page +1
    else:
        await callback.answer('–î–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞,—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    postcategory_key = data['postcategory_key']
    category_key = data.get('category_key')
    subcategory_name = data.get('subcategory_name')
    product_dict = data.get('product_dict')
    
    await update_product_message(callback, product_dict, subcategory_name, state, page)



async def update_product_message(callback: CallbackQuery, product_dict, subcategory_name, state: FSMContext, page):
    print(subcategory_name)
    text = f'–í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ {subcategory_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º –º–æ–¥–µ–ª—å'
    if 'iphone' in subcategory_name:
        path = ''
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text)
    
    keyboard_product = InlineKeyboardBuilder()
    
    if f'product_{page}' in product_dict:
        button1 = InlineKeyboardButton(text=product_dict[f'product_{page}']['name'], callback_data='button_1')
        button2 = InlineKeyboardButton(text=f'–¶–µ–Ω–∞: {int(product_dict[f"product_{page}"]["price"])} ‚ÇΩ', callback_data='buy')
    else:
        button1 = InlineKeyboardButton(text='-----------', callback_data='no_product')
        button2 = InlineKeyboardButton(text='-----------', callback_data='no_product')

    button3 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['backward'], callback_data='backward')
    button4 = InlineKeyboardButton(text=f'{page+1}/{len(product_dict)}', callback_data='pagenation')
    button5 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['forward'], callback_data='forward')
    button6 = InlineKeyboardButton(text=LEXICON_RU['back'], callback_data='back1')

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_product.row(button1)
    keyboard_product.row(button2)
    keyboard_product.row(button3, button4, button5)
    keyboard_product.row(button6)
    
    reply_markup_product = keyboard_product.as_markup()
    await callback.message.edit_media(
        media=media,
        reply_markup=reply_markup_product
    )

@user_private_router.callback_query(F.data == 'button_1')
async def process_admin_price_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get('page')
    product_dict = data.get('product_dict')
    await callback.answer(product_dict[f'product_{page}']['name'])
    
@user_private_router.callback_query(F.data == 'button_2')
async def process_admin_price_command(message: Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get('page')
    product_dict = data.get('product_list')
    await message.answer(product_dict[page]['name'])

@user_private_router.callback_query(or_f(F.data == 'personal_account', F.text.lower() == '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'))
async def process_admin_price_command(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    user_items = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user_items = user_items.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    summ_price = 0
    if user_items:
        print('True')
        first_name = user_items.first_name
        last_name = user_items.last_name
        address = user_items.address
        delivery_method = user_items.delivery_method
        payment_method = user_items.payment_method
        await callback.message.answer(
            text=(
                f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
                f'–§–∞–º–∏–ª–∏—è: {last_name}\n'
                f'–ò–º—è: {first_name}\n'
                f'–ê–¥—Ä–µ—Å: {address}\n'
                f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n'
                f'–í–∏–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n\n'
                '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:'
            ),
            reply_markup=create_inline_kb(
                1,
                edit_personal_account='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
            ))
    else:
        print('False')
        await callback.message.answer(
            text = f'–í—ã –µ—â–µ –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:',
            reply_markup=create_inline_kb(
                1,
                edit_personal_account = '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
            ))
#–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@user_private_router.callback_query(F.data == 'edit_personal_account')
async def process_client_name_command(callback: CallbackQuery, state: FSMContext): 
    await callback.message.answer(
        text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
        reply_markup=create_inline_kb(
            1,
            cancellation = LEXICON_RU['cancellation']
        ))
    await state.set_state(PersonalAccount.name)
    
@user_private_router.message(PersonalAccount.name, F.text)
async def process_client_first_name_command(message: Message,state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:',
        reply_markup=create_inline_kb(
            2,
            back = LEXICON_RU['back'],
            cancellation = LEXICON_RU['cancellation']
        ))
    await state.set_state(PersonalAccount.first_name)
    
@user_private_router.message(PersonalAccount.adress,F.text)
async def process_client_delivery_command(message: Message, state: FSMContext):
    await state.update_data(adress=message.text)
    await message.answer(
        text = f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n{LEXICON_DELYVERY_RU['standart_delivery']}\n{LEXICON_DELYVERY_RU['shop_delivery']}\n{LEXICON_DELYVERY_RU['curyer_delivery']}',
        reply_markup=create_inline_kb(
            2,
            back = LEXICON_RU['back'],
            cancellation = LEXICON_RU['cancellation']
        ))
    await state.set_state(PersonalAccount.delivery)
    
@user_private_router.message(PersonalAccount.delivery,F.text)
async def process_client_payment_command(message: Message, state: FSMContext):
    await state.update_data(delivery=message.text)
    await message.answer(
        text = f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n{LEXICON_DELYVERY_RU['standart_delivery']}\n\n{LEXICON_DELYVERY_RU['shop_delivery']}', 
        reply_markup=create_inline_kb(
            2,
            back = LEXICON_RU['back'],
            cancellation = LEXICON_RU['cancellation']
        ))

    await state.set_state(PersonalAccount.payment)
    
@user_private_router.message(PersonalAccount.payment, F.text)
async def finalize_account_update(message: Message, session: AsyncSession, state: FSMContext):
    await state.update_data(payment=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    stmt = (
        update(User).
        where(User.user_id == user_id).
        values(
            first_name=data.get('name'), 
            last_name=data.get('first_name'), 
            address=data.get('address'), 
            delivery_method=data.get('delivery'), 
            payment_method=data.get('payment')
        )
    )
    
    await session.execute(stmt)  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await session.commit()  # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

    
    text = 'üçè–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞, —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ Appleüçè\n\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω / Trade-in'
    await message.answer_photo(
        photo=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text,
        reply_markup=create_inline_kb(
            2,
            catalog = LEXICON_COMMANDS_RU['catalog'],
            news = LEXICON_COMMANDS_RU['news'],
            basket_buyer = LEXICON_COMMANDS_RU['basket_buyer'],
            orders = LEXICON_COMMANDS_RU['orders'],
            personal_account = LEXICON_COMMANDS_RU['personal_account'],
            search = LEXICON_COMMANDS_RU['search'],
            support = LEXICON_COMMANDS_RU['support']
        )
    )
    person_data = await state.get_data()
    await state.clear()

@user_private_router.message(PersonalAccount.payment)
async def process_client_payment_command(message: Message, state: FSMContext):
    await message.answer(
        text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ')

@user_private_router.message(PersonalAccount.first_name,F.text)
async def process_client_adress_command(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer(
        text = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:',
        reply_markup=create_inline_kb(
            2,
            back = LEXICON_RU['back'],
            cancellation = LEXICON_RU['cancellation']
        ))
    await state.set_state(PersonalAccount.adress)
    
@user_private_router.callback_query(StateFilter('*'), or_f(F.data == 'back', F.text.lower() == '–Ω–∞–∑–∞–¥'))
async def process_admin_price_command(callback: CallbackQuery, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == PersonalAccount.name:
        pass
    pervious = None
    for step in PersonalAccount.__all_states__:
        if step.state == current_state:
            await state.set_state(pervious)
            await callback.message.answer(PersonalAccount.texts[pervious.state])
            return
        pervious = step
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@user_private_router.callback_query(F.data == 'back1')
async def process_back_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    current_state = await state.get_state()
    if current_state == MenuStates.product_menu.state:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await process_category_command(callback, session, state)
        
    elif current_state == MenuStates.subcategory_menu.state:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await process_category_command(callback, session, state)
        
    elif current_state == MenuStates.category_menu.state:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await process_menu_refresh_command(callback.message, state)
    elif current_state == MenuStates.basket_menu.state:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await process_menu_refresh_command(callback.message, state)
    else:
        await process_menu_refresh_command(callback.message, state)
        

@user_private_router.callback_query(StateFilter('*'), or_f(F.data == 'cancellation', F.text.lower() == '–æ—Ç–º–µ–Ω–∞'))
async def process_admin_price_command(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã')
    text = 'üçè–†–æ–∑–Ω–∏—á–Ω–∞—è –∏ –æ–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞, —Ä–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ Appleüçè\n\n–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω / Trade-in'
    await callback.message.answer_photo(
        photo=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text,
        reply_markup=create_inline_kb(
            2,
            catalog = LEXICON_COMMANDS_RU['catalog'],
            news = LEXICON_COMMANDS_RU['news'],
            basket_buyer = LEXICON_COMMANDS_RU['basket_buyer'],
            orders = LEXICON_COMMANDS_RU['orders'],
            personal_account = LEXICON_COMMANDS_RU['personal_account'],
            search = LEXICON_COMMANDS_RU['search'],
            support = LEXICON_COMMANDS_RU['support']
        )
    )
    
@user_private_router.callback_query(or_f(F.data == 'support', F.text.lower() == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'))
async def process_admin_price_command(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    user_items = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user_items = user_items.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(user_items)
    summ_price = 0
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π text
    text = "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ user_items —Ä–∞–≤–Ω–æ None

    if user_items:
        first_name = user_items.first_name
        last_name = user_items.last_name
        address = user_items.address
        delivery_method = user_items.delivery_method
        payment_method = user_items.payment_method
        text = (
            f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
            f'–§–∞–º–∏–ª–∏—è: {last_name}\n'
            f'–ò–º—è: {first_name}\n'
            f'–ê–¥—Ä–µ—Å: {address}\n'
            f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n'
            f'–í–∏–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n'
        )
    
    await callback.answer('–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è')
    bot: Bot = callback.bot
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
    await bot.send_message(chat_id=-1002446526769, text=f"/support\nhttps://t.me/{callback.from_user.username}\n{text}")

@user_private_router.callback_query(F.data == 'buy')
async def process_admin_price_command(callback: CallbackQuery, session: AsyncSession):
    product = callback.message.reply_markup.inline_keyboard[0][0].text
    user_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    basket_item = await session.execute(
        select(BasketItem).where(BasketItem.user_id == user_id)
    )
    basket_item = basket_item.scalar_one_or_none()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–ª–∏ None

    if basket_item:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        products = json.loads(basket_item.product_name)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –µ—Å—Ç—å, –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        if product in products:
            products[product] += 1
        else:
            products[product] = 1  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É JSON –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        basket_item.product_name = json.dumps(products)
        await session.commit()
    else:
        # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_basket_item = BasketItem(user_id=user_id, product_name=json.dumps({product: 1}))  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1
        session.add(new_basket_item)
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.answer(f"–¢–æ–≤–∞—Ä '{product}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É.")



@user_private_router.callback_query(or_f(F.data == 'basket_buyer', F.text.lower() == '–∫–æ—Ä–∑–∏–Ω–∞'))
async def process_basket_buyer_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.set_state(MenuStates.basket_menu)
    user_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    basket_items = await session.execute(
        select(BasketItem).where(BasketItem.user_id == user_id)
    )
    basket_items = basket_items.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã

    response_message = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    summ_price = 0
    if basket_items:
        for item in basket_items:
            products = json.loads(item.product_name)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å
            print(products)
            for product_name, quantity in products.items():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                product_query = await session.execute(
                    select(Product).where(Product.name == product_name)
                )
                product = product_query.scalars().first()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º first() –≤–º–µ—Å—Ç–æ scalar_one_or_none()
                print(f'–¢–æ–≤–∞—Ä: {product}')
                if product:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    response_message += (
                        f"{product.name} (–¶–µ–Ω–∞: {int(product.new_price)} ‚ÇΩ.)\n"
                    )
                    summ_price += int(product.new_price)
                else:
                    response_message += f"{product_name} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
            response_message += f'\n –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summ_price} ‚ÇΩ'

    else:
        response_message = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=response_message)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(
        callback_data='buy_products',
        text='–ó–∞–∫–∞–∑–∞—Ç—å'
    )
    keyboard.button(
        callback_data='back1',
        text=LEXICON_RU['back']
    )
    keyboard.button(
        callback_data='delete_basket',
        text = '‚ùå–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É‚ùå'
    )
    keyboard.adjust(2)
    reply_markup_basket = keyboard.as_markup()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if response_message != '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞':
        await callback.message.edit_media(
            media=media,
            reply_markup=reply_markup_basket
        )
    else:
        await callback.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')

@user_private_router.callback_query(F.data == 'delete_basket')
async def process_admin_price_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    user_id = callback.from_user.id
    await session.execute(delete(BasketItem).where(BasketItem.user_id == user_id))
    await session.commit()
    await callback.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!')
    await process_back_command(callback, session, state)
    
@user_private_router.callback_query(F.data == 'buy_products')
async def process_admin_price_command(callback: CallbackQuery, session: AsyncSession):
    await callback.answer('–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–ª–∏ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
    user_id = callback.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    basket_items = await session.execute(
        select(BasketItem).where(BasketItem.user_id == user_id)
    )
    basket_items = basket_items.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
    
    response_message = "–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n"
    summ_price = 0
    
    if basket_items:
        for item in basket_items:
            products = json.loads(item.product_name)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å
            print(products)
            for product_name, quantity in products.items():
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                product_query = await session.execute(
                    select(Product).where(Product.name == product_name)
                )
                product = product_query.scalars().first()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º first() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
                
                print(f'–¢–æ–≤–∞—Ä: {product}')
                if product:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    response_message += (
                        f"{product.name} (–¶–µ–Ω–∞: {int(product.new_price)} ‚ÇΩ.)\n"
                    )
                    summ_price += int(product.new_price) * quantity  # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                else:
                    response_message += f"{product_name} (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
        
        response_message += f'\n –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summ_price} ‚ÇΩ'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_items = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user_items = user_items.scalars().first()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    print(user_items)
    
    if user_items:
        first_name = user_items.first_name
        last_name = user_items.last_name
        address = user_items.address
        delivery_method = user_items.delivery_method
        payment_method = user_items.payment_method
        
        text = (
            f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
            f'–§–∞–º–∏–ª–∏—è: {last_name}\n'
            f'–ò–º—è: {first_name}\n'
            f'–ê–¥—Ä–µ—Å: {address}\n'
            f'–í–∏–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n'
            f'–í–∏–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}\n'
        )
    
    bot: Bot = callback.bot
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç
    await bot.send_message(chat_id=-1002248889896, text=f"/–ü–û–ö–£–ü–ê–¢–ï–õ–¨\nhttps://t.me/{callback.from_user.username}\n{text}\n{response_message}")
    
@user_private_router.callback_query(or_f(F.data == 'orders', F.text.lower() == '–∑–∞–∫–∞–∑—ã'))
async def process_admin_price_command(message: Message):
    await message.answer('–í—ã –≤—Å–µ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!')
    
class Form(StatesGroup):
    search = State()
    page: int
    
    
@user_private_router.callback_query(or_f(F.data == 'search', F.text.lower() == '–ø–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞'))
async def process_admin_price_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞.')
    await state.set_state(Form.search)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
@user_private_router.message(Form.search, F.text)
async def process_client_search_command(message: Message, session: AsyncSession, state: FSMContext):
    query = message.text
    result = await session.execute(select(Product).where(Product.name.ilike(f'%{query}%')))
    products = result.scalars().all()
    
    products_list = [
        {
            'name': product.name,
            'price': product.price,
            'description': product.description
        }
        for product in products
    ]
    
    await state.update_data(product_list=products_list)
    await state.update_data(page=0)
    await update_search_product(message, products_list, state, page=0)

async def update_search_product(message: Message, product_list, state: FSMContext, page):
    text = f'–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(product_list)} —Ç–æ–≤–∞—Ä–æ–≤'
    media = InputMediaPhoto(
        media=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
        caption=text
    )
    
    keyboard_product = InlineKeyboardBuilder()
    
    if len(product_list) > 0:
        button1 = InlineKeyboardButton(text=product_list[page]['name'], callback_data='button_2')
        button2 = InlineKeyboardButton(text=f'–¶–µ–Ω–∞: {int(product_list[page]["price"])} ‚ÇΩ', callback_data='buy')
    else:
        button1 = InlineKeyboardButton(text='-----------', callback_data='no_product')
        button2 = InlineKeyboardButton(text='-----------', callback_data='no_product')

    button3 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['backward'], callback_data='backward_search')
    button4 = InlineKeyboardButton(text=f'{page + 1}/{len(product_list)}', callback_data='pagination')
    button5 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['forward'], callback_data='forward_search')
    button6 = InlineKeyboardButton(text=LEXICON_RU['back'], callback_data='back1')

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_product.row(button1)
    keyboard_product.row(button2)
    keyboard_product.row(button3, button4, button5)
    keyboard_product.row(button6)
    
    reply_markup_product = keyboard_product.as_markup()
    if page == 0:
        await message.answer_photo(
            photo=FSInputFile('photo_2024-11-18_02-47-25.jpg'),
            caption=text, 
            reply_markup=reply_markup_product
            )
    else:
        await message.edit_media(
            media=media,
            reply_markup=reply_markup_product
        )

@user_private_router.callback_query(F.data == 'backward_search')
async def process_backward_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await state.update_data(page=page - 1)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page - 1
    else:
        await callback.answer('–ú–µ–Ω—å—à–µ –Ω–µ–∫—É–¥–∞, —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    product_list = data.get('product_list')
    await update_search_product(callback.message, product_list, state, page)


@user_private_router.callback_query(F.data == 'forward_search')
async def process_forward_command(callback: CallbackQuery, session: AsyncSession,  state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    product_dict = data.get('product_list', {})
    if page < len(product_dict) - 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        await state.update_data(page=page + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page +1
    else:
        await callback.answer('–î–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞,—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    product_list = data.get('product_list')
    
    await update_search_product(callback.message, product_list, state, page)
    
    
class NewsCaption(StatesGroup):
    page:int
    
    
@user_private_router.callback_query(F.data == 'news')
async def send_news(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await session.execute(select(News))
    news_list = result.scalars().all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
    new_list = [
    {
        'photo_id': new.photo_id,
        'news_text': new.news_text,
        'created':new.created
    }
    for new in news_list
    ]
    new_list = sorted(new_list, key=lambda d: d['created'], reverse=True)
    print(new_list[0])
    await state.update_data(news_list=new_list)
    await state.update_data(page=0)
    await update_news(callback, new_list, state, page=0)   




@user_private_router.callback_query(F.data == 'news_backward')
async def process_news_backward_command(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await state.update_data(page=page - 1)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page - 1
    else:
        await callback.answer('–ú–µ–Ω—å—à–µ –Ω–µ–∫—É–¥–∞, —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    new_list = data['news_list']
    await update_news(callback, new_list, state, page)


@user_private_router.callback_query(F.data == 'news_forward')
async def process_news_forward_command(callback: CallbackQuery, session: AsyncSession,  state: FSMContext):
    data = await state.get_data()
    page = data.get('page')  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ page
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    print(page)
    news_list = data.get('news_list', {})
    if page < len(news_list) - 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
        await state.update_data(page=page + 1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ page
        page = page +1
    else:
        await callback.answer('–î–∞–ª—å—à–µ –Ω–µ–∫—É–¥–∞,—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!')
    data = await state.get_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    new_list = data['news_list']
    await update_news(callback, new_list, state, page)


# ,
async def update_news(callback: CallbackQuery, new_list, state: FSMContext, page):
    keyboard_product = InlineKeyboardBuilder()
    media = InputMediaPhoto(
        media=new_list[page]['photo_id'],
        caption=f'–î–∞—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏:   {new_list[page]['created']}\n\n{new_list[page]['news_text']}'
    )
    button3 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['backward'], callback_data='news_backward')
    button4 = InlineKeyboardButton(text=f'{page+1}/{len(new_list)}', callback_data='pagenation')
    button5 = InlineKeyboardButton(text=LEXICON_PAGINATION_RU['forward'], callback_data='news_forward')
    button6 = InlineKeyboardButton(text=LEXICON_RU['back'], callback_data='back1')

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    keyboard_product.row(button3, button4, button5)
    keyboard_product.row(button6)
    
    reply_markup_product = keyboard_product.as_markup()
    await callback.message.edit_media(
        media=media,
        reply_markup=reply_markup_product
    )

